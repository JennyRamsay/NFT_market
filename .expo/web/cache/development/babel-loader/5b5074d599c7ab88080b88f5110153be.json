{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _expoModulesCore = require(\"expo-modules-core\");\nvar _fontfaceobserver = _interopRequireDefault(require(\"fontfaceobserver\"));\nvar _Font = require(\"./Font.types\");\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction getFontFaceStyleSheet() {\n  if (!_expoModulesCore.Platform.isDOMAvailable) {\n    return null;\n  }\n  var styleSheet = getStyleElement();\n  return styleSheet.sheet ? styleSheet.sheet : null;\n}\nfunction getFontFaceRules() {\n  var sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    var rules = (0, _toConsumableArray2.default)(sheet.cssRules);\n    var items = [];\n    for (var i = 0; i < rules.length; i++) {\n      var rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({\n          rule: rule,\n          index: i\n        });\n      }\n    }\n    return items;\n  }\n  return [];\n}\nfunction getFontFaceRulesMatchingResource(fontFamilyName, options) {\n  var rules = getFontFaceRules();\n  return rules.filter(function (_ref) {\n    var rule = _ref.rule;\n    return rule.style.fontFamily === fontFamilyName && (options && options.display ? options.display === rule.style.fontDisplay : true);\n  });\n}\nvar _default = {\n  get name() {\n    return 'ExpoFontLoader';\n  },\n  unloadAllAsync: function unloadAllAsync() {\n    return function _callee() {\n      var element;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (_expoModulesCore.Platform.isDOMAvailable) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              element = document.getElementById(ID);\n              if (element && element instanceof HTMLStyleElement) {\n                document.removeChild(element);\n              }\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  unloadAsync: function unloadAsync(fontFamilyName, options) {\n    return function _callee2() {\n      var sheet, items, _iterator, _step, item;\n      return _regenerator.default.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              sheet = getFontFaceStyleSheet();\n              if (sheet) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 3:\n              items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n              for (_iterator = _createForOfIteratorHelperLoose(items); !(_step = _iterator()).done;) {\n                item = _step.value;\n                sheet.deleteRule(item.index);\n              }\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  loadAsync: function loadAsync(fontFamilyName, resource) {\n    return function _callee3() {\n      var canInjectStyle, style;\n      return _regenerator.default.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (_expoModulesCore.Platform.isDOMAvailable) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 2:\n              canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n              if (canInjectStyle) {\n                _context3.next = 5;\n                break;\n              }\n              throw new _expoModulesCore.CodedError('ERR_WEB_ENVIRONMENT', \"The browser's `document.head` element doesn't support injecting fonts.\");\n            case 5:\n              style = _createWebStyle(fontFamilyName, resource);\n              document.head.appendChild(style);\n              if (isFontLoadingListenerSupported()) {\n                _context3.next = 9;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 9:\n              return _context3.abrupt(\"return\", new _fontfaceobserver.default(fontFamilyName, {\n                display: resource.display\n              }).load());\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nexports.default = _default;\nvar ID = 'expo-generated-fonts';\nfunction getStyleElement() {\n  var element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  var styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\nfunction _createWebStyle(fontFamily, resource) {\n  var fontStyle = \"@font-face {\\n    font-family: \" + fontFamily + \";\\n    src: url(\" + resource.uri + \");\\n    font-display: \" + (resource.display || _Font.FontDisplay.AUTO) + \";\\n  }\";\n  var styleElement = getStyleElement();\n  if (styleElement.styleSheet) {\n    var styleElementIE = styleElement;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText ? styleElementIE.styleSheet.cssText + fontStyle : fontStyle;\n  } else {\n    var textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\nfunction isFontLoadingListenerSupported() {\n  var userAgent = window.navigator.userAgent;\n  var isIOS = !!userAgent.match(/iPad|iPhone/i);\n  var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  var isEdge = userAgent.includes('Edge');\n  var isIE = userAgent.includes('Trident');\n  var isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}","map":{"version":3,"mappings":"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","names":["getFontFaceStyleSheet","Platform","isDOMAvailable","styleSheet","getStyleElement","sheet","getFontFaceRules","rules","cssRules","items","i","length","rule","CSSFontFaceRule","push","index","getFontFaceRulesMatchingResource","fontFamilyName","options","filter","style","fontFamily","display","fontDisplay","name","unloadAllAsync","element","document","getElementById","ID","HTMLStyleElement","removeChild","unloadAsync","item","deleteRule","loadAsync","resource","canInjectStyle","head","appendChild","CodedError","_createWebStyle","isFontLoadingListenerSupported","FontObserver","load","styleElement","createElement","id","type","fontStyle","uri","FontDisplay","AUTO","styleElementIE","cssText","textNode","createTextNode","userAgent","window","navigator","isIOS","match","isSafari","test","isEdge","includes","isIE","isFirefox"],"sourceRoot":"","sources":["../src/ExpoFontLoader.web.ts"],"sourcesContent":["import { CodedError, Platform } from 'expo-modules-core';\nimport FontObserver from 'fontfaceobserver';\n\nimport { UnloadFontOptions } from './Font';\nimport { FontDisplay, FontResource } from './Font.types';\n\nfunction getFontFaceStyleSheet(): CSSStyleSheet | null {\n  if (!Platform.isDOMAvailable) {\n    return null;\n  }\n  const styleSheet = getStyleElement();\n  return styleSheet.sheet ? (styleSheet.sheet as CSSStyleSheet) : null;\n}\n\ntype RuleItem = { rule: CSSFontFaceRule; index: number };\n\nfunction getFontFaceRules(): RuleItem[] {\n  const sheet = getFontFaceStyleSheet();\n  if (sheet) {\n    // @ts-ignore: rule iterator\n    const rules = [...sheet.cssRules];\n\n    const items: RuleItem[] = [];\n\n    for (let i = 0; i < rules.length; i++) {\n      const rule = rules[i];\n      if (rule instanceof CSSFontFaceRule) {\n        items.push({ rule, index: i });\n      }\n    }\n    return items;\n  }\n  return [];\n}\n\nfunction getFontFaceRulesMatchingResource(\n  fontFamilyName: string,\n  options?: UnloadFontOptions\n): RuleItem[] {\n  const rules = getFontFaceRules();\n  return rules.filter(({ rule }) => {\n    return (\n      rule.style.fontFamily === fontFamilyName &&\n      (options && options.display ? options.display === (rule.style as any).fontDisplay : true)\n    );\n  });\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoFontLoader';\n  },\n\n  async unloadAllAsync(): Promise<void> {\n    if (!Platform.isDOMAvailable) return;\n\n    const element = document.getElementById(ID);\n    if (element && element instanceof HTMLStyleElement) {\n      document.removeChild(element);\n    }\n  },\n\n  async unloadAsync(fontFamilyName: string, options?: UnloadFontOptions): Promise<void> {\n    const sheet = getFontFaceStyleSheet();\n    if (!sheet) return;\n    const items = getFontFaceRulesMatchingResource(fontFamilyName, options);\n    for (const item of items) {\n      sheet.deleteRule(item.index);\n    }\n  },\n\n  async loadAsync(fontFamilyName: string, resource: FontResource): Promise<void> {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n\n    const canInjectStyle = document.head && typeof document.head.appendChild === 'function';\n    if (!canInjectStyle) {\n      throw new CodedError(\n        'ERR_WEB_ENVIRONMENT',\n        `The browser's \\`document.head\\` element doesn't support injecting fonts.`\n      );\n    }\n\n    const style = _createWebStyle(fontFamilyName, resource);\n    document.head!.appendChild(style);\n\n    if (!isFontLoadingListenerSupported()) {\n      return;\n    }\n\n    return new FontObserver(fontFamilyName, { display: resource.display }).load();\n  },\n};\n\nconst ID = 'expo-generated-fonts';\n\nfunction getStyleElement(): HTMLStyleElement {\n  const element = document.getElementById(ID);\n  if (element && element instanceof HTMLStyleElement) {\n    return element;\n  }\n  const styleElement = document.createElement('style');\n  styleElement.id = ID;\n  styleElement.type = 'text/css';\n  return styleElement;\n}\n\nfunction _createWebStyle(fontFamily: string, resource: FontResource): HTMLStyleElement {\n  const fontStyle = `@font-face {\n    font-family: ${fontFamily};\n    src: url(${resource.uri});\n    font-display: ${resource.display || FontDisplay.AUTO};\n  }`;\n\n  const styleElement = getStyleElement();\n  // @ts-ignore: TypeScript does not define HTMLStyleElement::styleSheet. This is just for IE and\n  // possibly can be removed if it's unnecessary on IE 11.\n  if (styleElement.styleSheet) {\n    const styleElementIE = styleElement as any;\n    styleElementIE.styleSheet.cssText = styleElementIE.styleSheet.cssText\n      ? styleElementIE.styleSheet.cssText + fontStyle\n      : fontStyle;\n  } else {\n    const textNode = document.createTextNode(fontStyle);\n    styleElement.appendChild(textNode);\n  }\n  return styleElement;\n}\n\nfunction isFontLoadingListenerSupported(): boolean {\n  const { userAgent } = window.navigator;\n  // WebKit is broken https://github.com/bramstein/fontfaceobserver/issues/95\n  const isIOS = !!userAgent.match(/iPad|iPhone/i);\n  const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  // Edge is broken https://github.com/bramstein/fontfaceobserver/issues/109#issuecomment-333356795\n  const isEdge = userAgent.includes('Edge');\n  // Internet Explorer\n  const isIE = userAgent.includes('Trident');\n  // Firefox\n  const isFirefox = userAgent.includes('Firefox');\n  return !isSafari && !isIOS && !isEdge && !isIE && !isFirefox;\n}\n"]},"metadata":{},"sourceType":"script"}